- hosts: all

  # Get home folder path
  pre_tasks:
    - name: Register home directory
      command: echo $HOME
      register: home
      sudo: No

  vars:
    installation_dir_timestamp: "{{ installation_dir }}_{{ lookup('pipe','date +%Y%m%d%H%M') }}"
    # The vopaas proxy installation folder
    installation_dir: "{{ home.stdout }}/vopaas"
    # Where to save the python virtual environ
    vopaas_env: "{{ installation_dir }}/virtualenv"
    # Where the generated backend metadata should be placed
    backend_metadata_location: "{{ installation_dir }}/metadata/backend"
    # Where the generated frontend metadata should be placed
    frontend_metadata_location: "{{ installation_dir }}/metadata/frontend"
    # Where remote metadata should be placed
    remote_metadata_location: "{{ installation_dir }}/metadata/remote"
    # Where shell scripts should be placed
    scripts_dir: "{{ installation_dir }}/bin"    
    # Where log files should be placed
    logs_dir: "{{ installation_dir }}/logs"    
    
    # SATOSA config
 
    # Proxy host name
    proxy_hostname: "145.100.180.53"
    # Proxy port
    proxy_port: "9091"
    # Need to be global for when generating metadata
    proxy_dir: "{{ installation_dir }}/proxy"

    #Nginx config
    nginx_hostname: "vopaasteip.pt-27.utr.surfcloud.nl"
    nginx_port: "443"
    
    # Which backend plugins are enabled? 
    # possible values: saml2_backend, openid_backend, google_backend, fb_backend
    backend_plugins_enabled: 
    - saml2_backend
    - google_backend

    # Which frontend plugins are enabled? 
    # possible values: saml2_frontend
    frontend_plugins_enabled: 
    - saml2_frontend
    
    # Number of workers (2 x $num_cores) + 1
    gunicorn_workers: 3
    # put in deamon mode?
    gunicorn_deamonize: true
    
    
  roles:
    # Install all python libraries to the virtual env
    - {role: install, sudo: no}
    # Setup the proxy with configurations and module plugins
    - {role: setup, sudo: no}
    # Install nginx to handle ssl
    - {role: nginx, sudo: yes}
    # Provision proxy endpoints
    # Generate metadata for the proxy frontend and backend
    - {role: generate_metadata, sudo: no}
